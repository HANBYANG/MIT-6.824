package mapreduce

import "container/list"
import "fmt"

/* Added by Yang */
import (
    "sync"
	"log"
)

type WorkerInfo struct {
	address string
	// You can add definitions here.
	available bool
}

// Clean up all workers by sending a Shutdown RPC to each one of them Collect
// the number of jobs each work has performed.
func (mr *MapReduce) KillWorkers() *list.List {
	l := list.New()
	for _, w := range mr.Workers {
		DPrintf("DoWork: shutdown %s\n", w.address)
		args := &ShutdownArgs{}
		var reply ShutdownReply
		ok := call(w.address, "Worker.Shutdown", args, &reply)
		if ok == false {
			fmt.Printf("DoWork: RPC %s shutdown error\n", w.address)
		} else {
			l.PushBack(reply.Njobs)
		}
	}
	return l
}

/*
func HandOutJob(WorkerAddress string, file string, opt JobType, nJobNumber int, nTotalNumber int) {
}
*/

// 1. The master should communicate with the workers via RPC.(go statement)
// 2. Hand out the map and reduce jobs to workers,
//    and return only when all the jobs have finished.
// 3. RunMaster only needs to tell the workers
//    the name of the original input file (mr.file) and the job number
// 4. Your RunMaster should process new worker registrations by
//    reading from mr.registerChannel
// 5. Modify the MapReduce struct to keep track of any additional state
//    and initialize this additional state in the InitMapReduce() function.
// 1. 集合是个坑
// 2. 利用waitgroup更简洁
// 3. channel是定长的
// 4. map线程安全问题
func (mr *MapReduce) RunMaster() *list.List {
	// Your code here
	// read from channel and phase as wk, use `go` to send wk DoJob,
	// *Modify the MapReduce struct to keep track of any additional state
	// wait for a worker to finish before handing out more jobs (channel),
	// finally wait all the jobs finished before return
	
	// if the master's RPC to the worker fails. the master should re-assign
	// the job given to the failed worker to another worker
    	
	go func() {
		for true {
			WorkerAddress := <-mr.registerChannel
			mr.Workers[WorkerAddress] = &WorkerInfo{WorkerAddress, true}
			mr.workerChannel <- WorkerAddress
		}
	}()
	
    var wg sync.WaitGroup
    
	log.Printf("Hand out map job\n")
	cMapJobUndoChannel := make(chan int, mr.nMap)
	for i := 0; i < mr.nMap; i++ {
	    cMapJobUndoChannel <- i
	    wg.Add(1)
	}
	
	go func() {
        for nJobNumber, ok := <- cMapJobUndoChannel; ok != false; nJobNumber, ok = <- cMapJobUndoChannel{
            WorkerAddress := <- mr.workerChannel
	        go func(cMapJobUndoChannel chan int, nJobNumber int, WorkerAddress string){
        	    args := &DoJobArgs{mr.file, Map, nJobNumber, mr.nReduce}
	            var reply DoJobReply
	            ok := call(WorkerAddress, "Worker.DoJob", args, &reply)
	            
	            if ok == false {
		            fmt.Printf("RunMaster: RPC %s DoJob on %s error\n", WorkerAddress, Map)
		            cMapJobUndoChannel <- nJobNumber
		            delete(mr.Workers, WorkerAddress)
	            } else {
	                wg.Done()
	                mr.workerChannel <- WorkerAddress
	            }
            }(cMapJobUndoChannel, nJobNumber, WorkerAddress)
	    }
    }()
    
    wg.Wait()
    close(cMapJobUndoChannel)

	log.Printf("Hand out reduce job\n")
	cReduceJobUndoChannel := make(chan int, mr.nReduce)
	for i := 0; i < mr.nReduce; i++ {
	    cReduceJobUndoChannel <- i
	    wg.Add(1)
	}
	
	go func() {
        for nJobNumber, ok := <- cReduceJobUndoChannel; ok != false; nJobNumber, ok = <- cReduceJobUndoChannel{
            WorkerAddress := <- mr.workerChannel
	        go func(cReduceJobUndoChannel chan int, nJobNumber int, WorkerAddress string){
        	    args := &DoJobArgs{mr.file, Reduce, nJobNumber, mr.nMap}
	            var reply DoJobReply
	            ok := call(WorkerAddress, "Worker.DoJob", args, &reply)
	            if ok == false {
		            fmt.Printf("RunMaster: RPC %s DoJob on %s error\n", WorkerAddress, Reduce)
		            cReduceJobUndoChannel <- nJobNumber
		            delete(mr.Workers, WorkerAddress)
	            } else {  
	                wg.Done()
	                mr.workerChannel <- WorkerAddress
	            } 
            }(cReduceJobUndoChannel, nJobNumber, WorkerAddress)
        }
	}()
	
    wg.Wait()
    close(cReduceJobUndoChannel)

	log.Printf("Kill workers and return\n")
	return mr.KillWorkers()
}
